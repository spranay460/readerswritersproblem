#include <pthread.h>

#include <semaphore.h>

#include <stdio.h>





int countval = 3;

int valu = 0;

sem_t semvalu;

pthread_mutex_t mutxvalu;



int h=0;

 void *writer(void *wr)

{

    sem_wait(&semvalu);

    countval = countval * 4 + 1;

   int c, d;

   

   for (c = 1; c <= 32767; c++)

       for (d = 1; d <= 32767; d++)

       {}

    printf("Writer %d modified countval to %d\n",(*((int *)wr)),countval);

    printf("No of readers present are %d\n",h);   

 sem_post(&semvalu);

}



int g=6;

void *reader(void *rr)

{

    // Reader acquire the lock before modifying numreader

    pthread_mutex_lock(&mutxvalu);

    valu++;

    if(valu == 1) {

        sem_wait(&semvalu); // If this id the first reader, then it will block the writer

    }

    pthread_mutex_unlock(&mutxvalu);

    // Reading Section

   int q,w;

   

   for (q = 1; q <=32767; q++)

       for (w = 1; w <= 32767; w++)

        { }



    printf("Reader %d countval is %d\n",*((int *)rr),countval);

    printf("No of readers present are %d\n",g);



    g--;

  

   

   

 // Reader acquire the lock before modifying numreader

    pthread_mutex_lock(&mutxvalu);

    valu--;





 if(valu == 0) {

        sem_post(&semvalu); // If this is the last reader, it will wake up the writer.

    }

    pthread_mutex_unlock(&mutxvalu);

}





int main()

{



    pthread_t read[6],write[6];

    pthread_mutex_init(&mutxvalu, NULL);

    sem_init(&semvalu,0,1);



    int a[6] = {1,2,3,4,5,6}; //Just used for numbering the producer and consumer



    for(int k = 1; k <=6  ; k++) {

        pthread_create(&read[k-1], NULL, (void *)reader, (void *)&a[k-1]);

    }

  

    for(int k = 1; k <= 6; k++) {

        pthread_create(&write[k-1], NULL, (void *)writer, (void *)&a[k-1]);

    }



   

    for(int k = 1; k <= 6; k++) {

        pthread_join(read[k-1], NULL);

    }



    for(int k = 1; k <= 6; k++) {

        pthread_join(write[k-1], NULL);

  }

    pthread_mutex_destroy(&mutxvalu);

    sem_destroy(&semvalu);



    return 0;

}

